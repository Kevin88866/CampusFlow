diff --git a/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.js b/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.js
index c42e4ac..84418a4 100644
--- a/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.js
+++ b/node_modules/react-native/Libraries/Components/AccessibilityInfo/AccessibilityInfo.js
@@ -34,14 +34,6 @@ type AccessibilityEventDefinitionsIOS = {
   darkerSystemColorsChanged: [boolean],
 };
 
-type AccessibilityEventDefinitions = {
-  ...AccessibilityEventDefinitionsAndroid,
-  ...AccessibilityEventDefinitionsIOS,
-  change: [boolean], // screenReaderChanged
-  reduceMotionChanged: [boolean],
-  screenReaderChanged: [boolean],
-};
-
 type AccessibilityEventTypes = 'click' | 'focus' | 'viewHoverEnter';
 
 // Mapping of public event names to platform-specific event names.
@@ -394,11 +386,7 @@ const AccessibilityInfo = {
    *
    * See https://reactnative.dev/docs/accessibilityinfo#addeventlistener
    */
-  addEventListener<K: $Keys<AccessibilityEventDefinitions>>(
-    eventName: K,
-    // $FlowIssue[incompatible-type] - Flow bug with unions and generics (T128099423)
-    handler: (...$ElementType<AccessibilityEventDefinitions, K>) => void,
-  ): EventSubscription {
+  addEventListener(eventName, handler, options) {
     const deviceEventName = EventNames.get(eventName);
     return deviceEventName == null
       ? {remove(): void {}}
diff --git a/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js b/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js
index 80e2514..d53df46 100644
--- a/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js
+++ b/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js
@@ -26,40 +26,6 @@ const GRAY = '#999999';
 
 type IndicatorSize = number | 'small' | 'large';
 
-type ActivityIndicatorIOSProps = $ReadOnly<{
-  /**
-    Whether the indicator should hide when not animating.
-
-    @platform ios
-  */
-  hidesWhenStopped?: ?boolean,
-}>;
-export type ActivityIndicatorProps = $ReadOnly<{
-  ...ViewProps,
-  ...ActivityIndicatorIOSProps,
-
-  /**
-   	Whether to show the indicator (`true`) or hide it (`false`).
-   */
-  animating?: ?boolean,
-
-  /**
-    The foreground color of the spinner.
-
-    @default {@platform android} `null` (system accent default color)
-    @default {@platform ios} '#999999'
-  */
-  color?: ?ColorValue,
-
-  /**
-    Size of the indicator.
-
-    @type enum(`'small'`, `'large'`)
-    @type {@platform android} number
-  */
-  size?: ?IndicatorSize,
-}>;
-
 const ActivityIndicator = (
   {
     animating = true,
@@ -153,10 +119,7 @@ const ActivityIndicator = (
 ```
 */
 
-const ActivityIndicatorWithRef: component(
-  ref?: React.RefSetter<HostComponent<empty>>,
-  ...props: ActivityIndicatorProps
-) = React.forwardRef(ActivityIndicator);
+const ActivityIndicatorWithRef = React.forwardRef(ActivityIndicator);
 ActivityIndicatorWithRef.displayName = 'ActivityIndicator';
 
 const styles = StyleSheet.create({
diff --git a/node_modules/react-native/Libraries/Components/Button.js b/node_modules/react-native/Libraries/Components/Button.js
index ad34c96..8ed27b2 100644
--- a/node_modules/react-native/Libraries/Components/Button.js
+++ b/node_modules/react-native/Libraries/Components/Button.js
@@ -27,147 +27,6 @@ import View from './View/View';
 import invariant from 'invariant';
 import * as React from 'react';
 
-export type ButtonProps = $ReadOnly<{
-  /**
-    Text to display inside the button. On Android the given title will be
-    converted to the uppercased form.
-   */
-  title: string,
-
-  /**
-    Handler to be called when the user taps the button. The first function
-    argument is an event in form of [GestureResponderEvent](pressevent).
-   */
-  onPress: (event?: GestureResponderEvent) => mixed,
-
-  /**
-    If `true`, doesn't play system sound on touch.
-
-    @platform android
-
-    @default false
-   */
-  touchSoundDisabled?: ?boolean,
-
-  /**
-    Color of the text (iOS), or background color of the button (Android).
-
-    @default {@platform android} '#2196F3'
-    @default {@platform ios} '#007AFF'
-   */
-  color?: ?ColorValue,
-
-  /**
-    TV preferred focus.
-
-    @platform tv
-
-    @default false
-   */
-  hasTVPreferredFocus?: ?boolean,
-
-  /**
-    Designates the next view to receive focus when the user navigates down. See
-    the [Android documentation][android:nextFocusDown].
-
-    [android:nextFocusDown]:
-    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusDown
-
-    @platform android, tv
-   */
-  nextFocusDown?: ?number,
-
-  /**
-    Designates the next view to receive focus when the user navigates forward.
-    See the [Android documentation][android:nextFocusForward].
-
-    [android:nextFocusForward]:
-    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusForward
-
-    @platform android, tv
-   */
-  nextFocusForward?: ?number,
-
-  /**
-    Designates the next view to receive focus when the user navigates left. See
-    the [Android documentation][android:nextFocusLeft].
-
-    [android:nextFocusLeft]:
-    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusLeft
-
-    @platform android, tv
-   */
-  nextFocusLeft?: ?number,
-
-  /**
-    Designates the next view to receive focus when the user navigates right. See
-    the [Android documentation][android:nextFocusRight].
-
-    [android:nextFocusRight]:
-    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusRight
-
-    @platform android, tv
-   */
-  nextFocusRight?: ?number,
-
-  /**
-    Designates the next view to receive focus when the user navigates up. See
-    the [Android documentation][android:nextFocusUp].
-
-    [android:nextFocusUp]:
-    https://developer.android.com/reference/android/view/View.html#attr_android:nextFocusUp
-
-    @platform android, tv
-   */
-  nextFocusUp?: ?number,
-
-  /**
-    Text to display for blindness accessibility features.
-   */
-  accessibilityLabel?: ?string,
-  /**
-   * Alias for accessibilityLabel  https://reactnative.dev/docs/view#accessibilitylabel
-   * https://github.com/facebook/react-native/issues/34424
-   */
-  'aria-label'?: ?string,
-  /**
-    If `true`, disable all interactions for this component.
-
-    @default false
-   */
-  disabled?: ?boolean,
-
-  /**
-    Used to locate this view in end-to-end tests.
-   */
-  testID?: ?string,
-
-  /**
-   * Accessibility props.
-   */
-  accessible?: ?boolean,
-  accessibilityActions?: ?$ReadOnlyArray<AccessibilityActionInfo>,
-  onAccessibilityAction?: ?(event: AccessibilityActionEvent) => mixed,
-  accessibilityState?: ?AccessibilityState,
-
-  /**
-   * alias for accessibilityState
-   *
-   * see https://reactnative.dev/docs/accessibility#accessibilitystate
-   */
-  'aria-busy'?: ?boolean,
-  'aria-checked'?: ?boolean | 'mixed',
-  'aria-disabled'?: ?boolean,
-  'aria-expanded'?: ?boolean,
-  'aria-selected'?: ?boolean,
-
-  /**
-   * [Android] Controlling if a view fires accessibility events and if it is reported to accessibility services.
-   */
-  importantForAccessibility?: ?('auto' | 'yes' | 'no' | 'no-hide-descendants'),
-  accessibilityHint?: ?string,
-  accessibilityLanguage?: ?Stringish,
-}>;
 
 /**
   A basic button component that should render nicely on any platform. Supports a
@@ -283,12 +142,7 @@ export type ButtonProps = $ReadOnly<{
 const Touchable: typeof TouchableNativeFeedback | typeof TouchableOpacity =
   Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;
 
-type ButtonRef = React.ElementRef<typeof Touchable>;
-
-const Button: component(
-  ref?: React.RefSetter<ButtonRef>,
-  ...props: ButtonProps
-) = React.forwardRef((props: ButtonProps, ref: React.RefSetter<ButtonRef>) => {
+const Button = React.forwardRef((props, ref) => {
   const {
     accessibilityLabel,
     accessibilityState,
diff --git a/node_modules/react-native/Libraries/Core/registerCallableModule.js b/node_modules/react-native/Libraries/Core/registerCallableModule.js
index 0a0951c..419eca9 100644
--- a/node_modules/react-native/Libraries/Core/registerCallableModule.js
+++ b/node_modules/react-native/Libraries/Core/registerCallableModule.js
@@ -10,12 +10,6 @@
 
 'use strict';
 
-type Module = {...};
-type RegisterCallableModule = (
-  name: string,
-  moduleOrFactory: Module | (void => Module),
-) => void;
-
 const registerCallableModule: RegisterCallableModule = (function () {
   if (global.RN$Bridgeless === true) {
     return (name, moduleOrFactory) => {
diff --git a/node_modules/react-native/Libraries/Lists/FlatList.js b/node_modules/react-native/Libraries/Lists/FlatList.js
index d1240ae..95f2364 100644
--- a/node_modules/react-native/Libraries/Lists/FlatList.js
+++ b/node_modules/react-native/Libraries/Lists/FlatList.js
@@ -37,7 +37,6 @@ type RequiredProps<ItemT> = {
    * An array (or array-like list) of items to render. Other data types can be
    * used by targeting VirtualizedList directly.
    */
-  data: ?$ReadOnly<$ArrayLike<ItemT>>,
 };
 type OptionalProps<ItemT> = {
   /**
